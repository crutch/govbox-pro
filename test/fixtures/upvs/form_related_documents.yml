# Read about fixtures at https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html

general_agenda_xsd:
  data: <?xml version="1.0" encoding="UTF-8"?><xs:schema elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://schemas.gov.sk/form/App.GeneralAgenda/1.9" xmlns="http://schemas.gov.sk/form/App.GeneralAgenda/1.9"><xs:simpleType name="textArea"><xs:restriction base="xs:string"></xs:restriction></xs:simpleType><xs:simpleType name="meno"><xs:restriction base="xs:string"></xs:restriction></xs:simpleType><xs:element name="GeneralAgenda"><xs:complexType><xs:sequence><xs:element name="subject" type="meno" minOccurs="0" nillable="true" /><xs:element name="text" type="textArea" minOccurs="0" nillable="true" /></xs:sequence></xs:complexType></xs:element></xs:schema>
  document_type: CLS_F_XSD_EDOC
  language: sk
  form: general_agenda

general_agenda_html_xslt:
  data: <?xml version="1.0" encoding="UTF-8"?>
    <xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:egonp="http://schemas.gov.sk/form/App.GeneralAgenda/1.9" exclude-result-prefixes="egonp">
    <xsl:output method="html" doctype-system="http://www.w3.org/TR/html4/strict.dtd" doctype-public="-//W3C//DTD HTML 4.01//EN" indent="no" omit-xml-declaration="yes"/>
    <xsl:template match="/">
    <html>
    <head>
      <meta http-equiv="X-UA-Compatible" content="IE=8" />
      <title>Všeobecná agenda</title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
      <meta name="language" content="sk-SK"/>
    </head>
    <body>
    <div id="main" class="layoutMain">
    <xsl:apply-templates/>
    </div>
    </body>
    </html>
    </xsl:template>
    <xsl:template match="/egonp:GeneralAgenda">
    <div class="layoutRow ui-tabs ui-widget-content" >
    <div class="caption ui-widget-header">
    <div class="headercorrection">Všeobecná agenda</div>
    </div>
    <xsl:apply-templates select="./egonp:subject"/>
    <xsl:apply-templates select="./egonp:text"/>
    </div>
    </xsl:template>
    <xsl:template match="egonp:GeneralAgenda/egonp:subject">
    <xsl:if test="./text()">
    <div>
    <label class="labelVis">Predmet:</label>
    <span class="contentVis wordwrap">
    <xsl:call-template name="string-replace-all">
    <xsl:with-param name="text" select="." />
    <xsl:with-param name="replace" select="'%0A'" />
    <xsl:with-param name="by" select="'&#13;&#10;'" />
    </xsl:call-template>
    </span>
    </div>
    <div class="clear">&#xa0;</div>
    </xsl:if>
    </xsl:template>
    <xsl:template match="egonp:GeneralAgenda/egonp:text">
    <xsl:if test="./text()">
    <div>
    <label class="labelVis">Text:</label>
    <span class="contentVis wordwrap">
    <xsl:call-template name="string-replace-all">
    <xsl:with-param name="text" select="." />
    <xsl:with-param name="replace" select="'%0A'" />
    <xsl:with-param name="by" select="'&#13;&#10;'" />
    </xsl:call-template>
    </span>
    </div>
    <div class="clear">&#xa0;</div>
    </xsl:if>
    </xsl:template>
    <xsl:template name="formatToSkDate">
    <xsl:param name="date" />
    <xsl:variable name="dateString" select="string($date)" />
    <xsl:choose>
    <xsl:when test="$dateString != '' and string-length($dateString)=10 and string(number(substring($dateString, 1, 4))) != 'NaN' ">
    <xsl:value-of select="concat(substring($dateString, 9, 2), '.', substring($dateString, 6, 2), '.', substring($dateString, 1, 4))" />
    </xsl:when>
    <xsl:otherwise>
    <xsl:value-of select="$dateString"></xsl:value-of>
    </xsl:otherwise>
    </xsl:choose>
    </xsl:template>
    <xsl:template name="booleanCheckboxToString">
    <xsl:param name="boolValue" />
    <xsl:variable name="boolValueString" select="string($boolValue)" />
    <xsl:choose>
    <xsl:when test="$boolValueString = 'true' ">
    <xsl:text>Áno</xsl:text>
    </xsl:when>
    <xsl:when test="$boolValueString = 'false' ">
    <xsl:text>Nie</xsl:text>
    </xsl:when>
    <xsl:when test="$boolValueString = '1' ">
    <xsl:text>Áno</xsl:text>
    </xsl:when>
    <xsl:when test="$boolValueString = '0' ">
    <xsl:text>Nie</xsl:text>
    </xsl:when>
    <xsl:otherwise>
    <xsl:value-of select="$boolValueString"></xsl:value-of>
    </xsl:otherwise>
    </xsl:choose>
    </xsl:template>
    <xsl:template name="formatTimeTrimSeconds">
    <xsl:param name="time" />
    <xsl:variable name="timeString" select="string($time)" />
    <xsl:if test="$timeString != ''">
    <xsl:value-of select="substring($timeString, 1, 5)" />
    </xsl:if>
    </xsl:template>
    <xsl:template name="formatTime">
    <xsl:param name="time" />
    <xsl:variable name="timeString" select="string($time)" />
    <xsl:if test="$timeString != ''">
    <xsl:value-of select="substring($timeString, 1, 8)" />
    </xsl:if>
    </xsl:template>
    <xsl:template name="string-replace-all">
    <xsl:param name="text"/>
    <xsl:param name="replace"/>
    <xsl:param name="by"/>
    <xsl:choose>
    <xsl:when test="contains($text, $replace)">
    <xsl:value-of select="substring-before($text,$replace)"/>
    <xsl:value-of select="$by"/>
    <xsl:call-template name="string-replace-all">
    <xsl:with-param name="text" select="substring-after($text,$replace)"/>
    <xsl:with-param name="replace" select="$replace"/>
    <xsl:with-param name="by" select="$by" />
    </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
    <xsl:value-of select="$text"/>
    </xsl:otherwise>
    </xsl:choose>
    </xsl:template>
    <xsl:template name="formatToSkDateTime">
    <xsl:param name="dateTime" />
    <xsl:variable name="dateTimeString" select="string($dateTime)" />
    <xsl:choose>
    <xsl:when test="$dateTimeString!= '' and string-length($dateTimeString)>18 and string(number(substring($dateTimeString, 1, 4))) != 'NaN' ">
    <xsl:value-of select="concat(substring($dateTimeString, 9, 2), '.', substring($dateTimeString, 6, 2), '.', substring($dateTimeString, 1, 4),' ', substring($dateTimeString, 12, 2),':', substring($dateTimeString, 15, 2))" />
    </xsl:when>
    <xsl:otherwise>
    <xsl:value-of select="$dateTimeString"></xsl:value-of>
    </xsl:otherwise>
    </xsl:choose>
    </xsl:template>
    <xsl:template name="formatToSkDateTimeSecond">
    <xsl:param name="dateTime" />
    <xsl:variable name="dateTimeString" select="string($dateTime)" />
    <xsl:choose>
    <xsl:when test="$dateTimeString!= '' and string-length($dateTimeString)>18 and string(number(substring($dateTimeString, 1, 4))) != 'NaN' ">
    <xsl:value-of select="concat(substring($dateTimeString, 9, 2), '.', substring($dateTimeString, 6, 2), '.', substring($dateTimeString, 1, 4),' ', substring($dateTimeString, 12, 2),':', substring($dateTimeString, 15, 2),':', substring($dateTimeString, 18, 2))" />
    </xsl:when>
    <xsl:otherwise>
    <xsl:value-of select="$dateTimeString"></xsl:value-of>
    </xsl:otherwise>
    </xsl:choose>
    </xsl:template>
    </xsl:stylesheet>
  document_type: CLS_F_XSLT_HTML
  language: sk
  form: general_agenda
