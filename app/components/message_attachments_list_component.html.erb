<div id="attachments" is="turbo-frame" class="w-full">
  <% if @message.not_yet_submitted? || @message.objects.present? %>
    <div class="border-b">
      <div class="flex justify-stretch items-center self-stretch flex-grow-0 flex-shrink-0 gap-3 px-6 py-4 border-b">
        <%= form_tag message_message_objects_path(@message), id: "attachment_form", method: :post, multipart: true, class: "w-full" do %>
          <div class="flex flex-col justify-between items-start flex-grow gap-2">
            <div class="flex justify-start items-center flex-grow relative rt flex-grow-0 flex-shrink-0 gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 448 512">
                <!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                <path d="M364.2 83.8c-24.4-24.4-64-24.4-88.4 0l-184 184c-42.1 42.1-42.1 110.3 0 152.4s110.3 42.1 152.4 0l152-152c10.9-10.9 28.7-10.9 39.6 0s10.9 28.7 0 39.6l-152 152c-64 64-167.6 64-231.6 0s-64-167.6 0-231.6l184-184c46.3-46.3 121.3-46.3 167.6 0s46.3 121.3 0 167.6l-176 176c-28.6 28.6-75 28.6-103.6 0s-28.6-75 0-103.6l144-144c10.9-10.9 28.7-10.9 39.6 0s10.9 28.7 0 39.6l-144 144c-6.7 6.7-6.7 17.7 0 24.4s17.7 6.7 24.4 0l176-176c24.4-24.4 24.4-64 0-88.4z"/>
              </svg>
              <p class="flex-grow-0 flex-shrink-0 text-base text-left text-gray-900">
                <% if @message.objects.count > 0 %>
                  Správa obsahuje <b><%= t('message_object', :count => @message.objects.count, :locale => :sk) %></b>
                <% elsif @message.not_yet_submitted? %>
                  <b>Pridať prílohu</b>
                <% end %>
              </p>
              <% if @message.not_yet_submitted? %>
                <%= label_tag :attachments_, "Pridať prílohy", class: "block mb-2 text-sm font-medium text-gray-900 dark:text-white" %>
                <%= file_field_tag 'attachments[]', onchange: 'document.getElementById("attachment_form").requestSubmit()', class: "text-gray-900 bg-white focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm font-semibold px-5 py-2.5 dark:border-gray-600", multiple: true %>

                <% if @message.objects.unsigned.present? %>
                  <div data-controller="autogram_signing">
                    <button type="button" data-action="click->autogram_signing#signMultipleFiles" data-files_to_be_signed="<%= @message.objects.unsigned.map{|o| {id: o.id, message_id: o.message_id}}.to_json.html_safe %>" class="flex justify-end items-center gap-2.5 px-3.5 py-2.5 rounded-md bg-white border border-gray-300">
                      Podpísať všetky nepodpísané dokumenty
                    </button>
                  </div>

<!--                  <input id="files_to_be_signed" type="hidden" value=<%#= @message.objects.unsigned.map{|o| {id: o.id, message_id: o.message_id}}.to_json.html_safe %>>-->
                <% end %>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>

      <div class="flex flex-col justify-stretch items-stretch  relative gap-4 px-6 py-4 bg-white border-t-0 border-r-0 border-b border-l-0 border-gray-200">
        <%= render MessageAttachmentComponent.with_collection(@message.objects) %>
      </div>
    </div>
  <% end %>

  <script type="text/javascript">
<!--  var objectsToBeSigned = <%#= @message.objects.unsigned.map{|o| {id: o.id, message_id: o.message_id}}.to_json.html_safe %>;-->

  // TODO separate to JS file (using stimulus?)
  // function signObjects() {
  //   fetch("http://localhost:37200/batch", {
  //     method: "POST",
  //     headers: {"Content-Type": "application/json"},
  //     body: JSON.stringify({
  //       "totalNumberOfDocuments": objectsToBeSigned.length
  //     })
  //   }).then(function (response) {
  //     return response.json();
  //   }).then(function (data) {
  //     return data.batchId;
  //   }).then(async function (batchId) {
  //     for(const object of objectsToBeSigned) {
  //       await sign(object.id, object.message_id, batchId);
  //     }
  //   }).catch(function (err) {
  //     if (err.message === "Failed to fetch") {
  //       alert("Spustite aplikáciu autogram.")
  //     }
  //   });
  // }
  //
  // async function sign(messageObjectId, messageId, batchId = null) {
  //   return new Promise((resolve, reject) => {
  //     fetch(`/messages/${messageId}/message_objects/${messageObjectId}/signing_data.json`)
  //       .then(function (response) {
  //         return response.json();
  //       })
  //       .then(async function (messageObjectData) {
  //         let payloadMimeType = `${messageObjectData.mime_type};base64`;
  //         let signatureLevel = "XAdES_BASELINE_B";
  //         let signatureContainer = "ASiC_E";
  //
  //         let signedFileName = await setSignedFileName(messageObjectData);
  //         let signedFileMimeType = "application/vnd.etsi.asic-e+zip";
  //
  //         switch(messageObjectData.mime_type) {
  //           case "application/pdf":
  //             signatureLevel = "PAdES_BASELINE_B";
  //             signatureContainer = null;
  //
  //             signedFileName = messageObjectData.file_name;
  //             signedFileMimeType = messageObjectData.mime_type;
  //             break;
  //           // TODO check what in this case
  //           // case 'application/xml':
  //           //   break;
  //           case 'application/x-eform-xml':
  //             payloadMimeType = "application/xml;base64"
  //             break;
  //           case 'application/msword':
  //           case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
  //             payloadMimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64"
  //             break;
  //           case 'image/jpeg':
  //           case 'image/tiff':
  //           case 'image/png':
  //             signatureLevel = "CAdES_BASELINE_B";
  //             break;
  //         }
  //
  //         fetch("http://localhost:37200/sign", {
  //           method: "POST",
  //           headers: {'Content-Type': 'application/json'},
  //           body: JSON.stringify({
  //             batchId: batchId,
  //             document: {
  //               filename: messageObjectData.file_name,
  //               content: messageObjectData.content
  //             },
  //             parameters: {
  //               level: signatureLevel,
  //               container: signatureContainer,
  //               identifier: messageObjectData.identifier,
  //               schema: messageObjectData.schema,
  //               containerXmlns: messageObjectData.container_xmlns,
  //               transformation: messageObjectData.transformation
  //             },
  //             payloadMimeType: payloadMimeType
  //           })
  //         }).then(function (response) {
  //           return response.json();
  //         }).then(function (signedData) {
  //           updateObject(messageObjectId, messageId, signedFileName, signedFileMimeType, signedData.content);
  //         }).then(function () {
  //           resolve();
  //         }).catch(function (err) {
  //           if (err.message === "Failed to fetch") {
  //             alert("Spustite aplikáciu autogram.")
  //           }
  //         });
  //       })
  //   });
  // }
  //
  // async function updateObject(messageObjectId, messageId, signedFileName, signedFileMimeType, signedContent) {
  //   return new Promise((resolve, reject) => {
  //     fetch(`/messages/${messageId}/message_objects/${messageObjectId}`, {
  //       method: "PATCH",
  //       headers: {"Content-Type": "application/json"},
  //       body: JSON.stringify({
  //         authenticity_token: authenticityToken,
  //         name: signedFileName,
  //         mimetype: signedFileMimeType,
  //         is_signed: true,
  //         content: signedContent,
  //         format: "turbo_stream"
  //       })
  //     }).then(function () {
  //       resolve();
  //     })
  //   });
  // }
  //
  // async function setSignedFileName(messageObjectData) {
  //   return messageObjectData.file_name.substring(0, messageObjectData.file_name.lastIndexOf('.')).concat(".asice") || messageObjectData.file_name;
  // }
  //
  // var signObjectsButton = document.querySelector("#sign_objects");
  // if (signObjectsButton) {
  //   signObjectsButton.onclick = signObjects;
  // }
  //
  // var authenticityToken = document.getElementById('authenticity-token').getAttribute('content')
</script>
</div>
